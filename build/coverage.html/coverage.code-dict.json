{"/home/travis/build/npmtest/node-npmtest-grunt-jslint/test.js":"/* istanbul instrument in package npmtest_grunt_jslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jslint/lib.npmtest_grunt_jslint.js":"/* istanbul instrument in package npmtest_grunt_jslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_jslint = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_jslint = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jslint/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-jslint && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_jslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_jslint\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_jslint.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_jslint.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_jslint.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_jslint.__dirname + '/lib.npmtest_grunt_jslint.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jslint/node_modules/grunt-jslint/index.js":"\nmodule.exports = process.env.JSLINT_COV\n  ? require('./lib-cov/jslint')\n  : require('./lib/jslint');\n","/home/travis/build/npmtest/node-npmtest-grunt-jslint/node_modules/grunt-jslint/lib/jslint.js":"\n'use strict';\n\nvar fs = require('fs');\nvar vm = require('vm');\nvar path = require('path');\nvar resolve = path.resolve;\nvar nodelint = require('jslint/lib/nodelint');\n\nvar jslint = module.exports;\n\n/**\n * The `JSLINT` function\n *\n * @api public\n * @param {String} source\n * @param {Object} options\n */\n\nvar JSLINT;\n\n/**\n * Expose the current version of JSLint\n *\n * @api public\n * @type {String}\n */\n\njslint.edition = '';\n\n/**\n * Load (or reload) the actual jslint linter module\n *\n * @api public\n * @param {String} edition\n * @param {Function} [cb]\n */\n\nfunction loadJSLint(edition, cb) {\n  JSLINT = jslint.JSLINT = nodelint.load(edition);\n  jslint.edition = JSLINT.edition;\n\n  if (cb) {\n    cb(null, jslint.edition);\n  }\n}\n\n/**\n * Load JSLINT from the given `path`, optionally\n * invoking `cb(err, jslint)`.\n *\n * @api public\n * @param {String} path\n * @param {Function} [cb]\n */\n\nfunction loadJSLintFromPath(path, cb) {\n  var ctx = vm.createContext();\n  var code = fs.readFileSync(resolve(process.cwd(), path));\n\n  vm.runInContext(code, ctx);\n\n  JSLINT = jslint.JSLINT = ctx.JSLINT;\n  jslint.edition = JSLINT.edition;\n\n  if (cb) {\n    cb(null, jslint.edition);\n  }\n}\n\n/**\n * Expose `loadJSLint`.\n */\n\njslint.loadJSLint = loadJSLint;\n\n/**\n * Expose `loadJSLintFromPath`.\n */\n\njslint.loadJSLintFromPath = loadJSLintFromPath;\n\n// default - can be overridden by setting 'edition' in grunt options\nloadJSLint('latest');\n\n\n/**\n * Run `JSLINT` on the given `files`\n *\n * @api public\n * @param {Array} files\n * @param {Object} opts\n * @param {Function} cb\n */\n\njslint.runner = function (files, opts, cb) {\n  var pending = files.length;\n  var report = {\n    files: {},\n    failures: 0,\n    file_count: files.length,\n    files_in_violation: 0\n  };\n  var done = false;\n\n  if (opts.edition) {\n    if (opts.edition.indexOf(\".js\") === opts.edition.length - 3) {\n      loadJSLintFromPath(opts.edition);\n    } else {\n      loadJSLint(opts.edition);\n    }\n  }\n\n  files.forEach(function (file) {\n    jslint.validate(file, opts, function (err, violations) {\n      if (done) { return; }\n\n      if (err) {\n        done = true;\n        return cb(err);\n      }\n\n      report.files[file] = violations;\n\n      if (violations.length) {\n        report.failures += violations.length;\n        report.files_in_violation += 1;\n      }\n\n      pending -= 1;\n      if (!pending) {\n        done = true;\n        cb(null, report);\n      }\n    });\n  });\n};\n\n/**\n * Run `JSLINT` on the given `file`\n *\n * @api public\n * @param {String} files\n * @param {Object} opts\n * @param {Function} cb\n */\n\njslint.preprocessScript = function preprocessScript(source, stripShebang) {\n  if (source.charCodeAt(0) === 0xFEFF) {\n    source = source.slice(1);\n  }\n\n  if (stripShebang) {\n    // remove shebang lines for executable files\n    //   e.g. `#!/usr/bin/env node`\n    /*jslint regexp: true*/\n    source = source.replace(/^\\#\\!.*/, '');\n    /*jslint regexp: false*/\n  }\n\n  return source;\n};\n\njslint.validate = function (file, opts, cb) {\n  var directives = opts.directives || {};\n\n  // `predef` is obnoxious\n  if (directives.globals) {\n    directives.predef = directives.globals;\n    delete directives.globals;\n  }\n\n  fs.readFile(file, 'utf8', function (err, source) {\n    if (err) {\n      return cb(err);\n    }\n\n    source = jslint.preprocessScript(source, opts.shebang);\n\n    JSLINT(source, directives);\n\n    var violations = JSLINT.errors;\n    var res = [];\n\n    violations.forEach(function (violation) {\n      if (!violation) {\n        return;\n      }\n\n      violation.file = file;\n      res.push(violation);\n    });\n\n    return cb(null, res);\n  });\n};\n\n/**\n * All available reporters\n *\n * @api private\n * @type {Object}\n */\n\njslint.reporters = require('./reporters');\n","/home/travis/build/npmtest/node-npmtest-grunt-jslint/node_modules/grunt-jslint/lib/reporters/index.js":"\nexports.checkstyle = require('./check-style');\nexports.jslint = require('./jslint');\nexports.junit = require('./junit');\nexports.standard = require('./standard');\nexports.errorsOnly = require('./errors-only');\n\n/*jslint nomen: true*/\nexports._util = require('./util');\n","/home/travis/build/npmtest/node-npmtest-grunt-jslint/node_modules/grunt-jslint/lib/reporters/check-style.js":"\n'use strict';\n\nvar util = require('./util');\n\nmodule.exports = function (report) {\n  var xml = [\n    '<?xml version=\"1.0\" encoding=\"utf-8\"?>',\n    '<checkstyle>'\n  ];\n\n  Object.keys(report.files).forEach(function (file) {\n    var issues = report.files[file];\n\n    xml.push('<file name=\"' + file + '\">');\n\n    issues.forEach(function (issue) {\n      var msg = issue.reason || 'Unused variable \"' + issue.name + '\"';\n\n      xml.push([\n        '<error',\n        ' line=\"' + issue.line + '\"',\n        ' column=\"' + issue.character + '\"',\n        ' severity=\"warning\"',\n        ' message=\"' + util.escapeForXml(msg) + '\"',\n        ' source=\"com.jslint\"',\n        '/>'\n      ].join(''));\n    });\n\n    xml.push('</file>');\n  });\n\n  xml.push('</checkstyle>');\n\n  return xml.join('\\n');\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-jslint/node_modules/grunt-jslint/lib/reporters/util.js":"\n'use strict';\n\n/**\n * Excape the given `value` for xml\n *\n * @api private\n * @param {String} value\n * @return {String}\n */\n\nexports.escapeForXml = function (value) {\n  return value\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;');\n};\n\n/**\n * Get an xml-safe message for the given `issue`\n *\n * @api private\n * @param {String} issue\n * @return {String}\n */\n\nexports.message = function (issue) {\n  var msg = issue.reason || 'Unused variable \"' + issue.name + '\"';\n  return exports.escapeForXml(msg);\n};\n\n/**\n * ANSI colors.\n */\n\nexports.color = {\n\n  /**\n   * Wrap `str` in red\n   *\n   * @api private\n   * @param {String} str\n   * @return {String}\n   */\n\n  red: function (str) {\n    return [ '\\x1B[31m', str, '\\x1B[39m' ].join('');\n  },\n\n  /**\n   * Wrap `str` in green\n   *\n   * @api private\n   * @param {String} str\n   * @return {String}\n   */\n\n  green: function (str) {\n    return [ '\\x1B[32m', str, '\\x1B[39m' ].join('');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-jslint/node_modules/grunt-jslint/lib/reporters/jslint.js":"\n'use strict';\n\nvar util = require('./util');\n\nmodule.exports = function (report) {\n  var xml = [\n    '<?xml version=\"1.0\" encoding=\"utf-8\"?>',\n    '<jslint>'\n  ];\n\n  Object.keys(report.files).forEach(function (file) {\n    var issues = report.files[file];\n\n    xml.push('<file name=\"' + file + '\">');\n\n    issues.forEach(function (issue) {\n      var reason = util.message(issue),\n        evidence = issue.evidence || '';\n\n      xml.push([\n        '<issue',\n        ' line=\"' + issue.line + '\"',\n        ' char=\"' + issue.character + '\"',\n        ' reason=\"' + util.escapeForXml(reason) + '\"',\n        ' evidence=\"' + util.escapeForXml(evidence) + '\"',\n        '/>'\n      ].join(''));\n    });\n\n    xml.push('</file>');\n  });\n\n  xml.push('</jslint>');\n\n  return xml.join('\\n');\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-jslint/node_modules/grunt-jslint/lib/reporters/junit.js":"\n'use strict';\n\nvar util = require('./util');\nvar path = require('path');\n\nmodule.exports = function (report) {\n  var xml = [\n    '<?xml version=\"1.0\" encoding=\"utf-8\"?>',\n    '<testsuites>',\n    '  <testsuite>'\n  ];\n\n  Object.keys(report.files).forEach(function (file) {\n    var parts = file.split(/[\\\\\\/]/).filter(function (part) { return part; });\n    var classname = parts.join('.').replace(/\\.js$/i, '').replace(/-/g, '_');\n    var filename = path.basename(file, '.js');\n    var failures = report.files[file];\n\n    if (failures.length) {\n      failures.forEach(function (failure) {\n        var name = filename\n                 + ':'\n                 + failure.line\n                 + ':'\n                 + (failure.character || '');\n\n        xml.push([\n          '<testcase classname=\"' + classname + '\" name=\"' + name + '\">',\n          '  <failure message=\"' + util.message(failure) + '\" />',\n          '</testcase>'\n        ].join('\\n'));\n      });\n    } else {\n      xml.push([\n        '<testcase classname=\"' + classname + '\" name=\"' + filename + ':0:0\"></testcase>'\n      ].join('\\n'));\n    }\n  });\n\n  xml = xml.concat([\n    '  </testsuite>',\n    '</testsuites>'\n  ]);\n\n  return xml.join('\\n');\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-jslint/node_modules/grunt-jslint/lib/reporters/standard.js":"\n'use strict';\n\nvar util = require('./util');\nvar red = util.color.red;\n\nmodule.exports = function (report, errorsOnly) {\n  var buf = '';\n\n  Object.keys(report.files).forEach(function (file) {\n    var issues = report.files[file];\n\n    if (!issues.length) {\n      if (!errorsOnly) {\n        buf += util.color.green('PASS');\n        buf += '\\t' + file + '\\n';\n      }\n      return;\n    }\n\n    buf += red('FAIL') + '\\t';\n    buf += file + ' (' + issues.length + ')\\n';\n    issues.forEach(function (issue) {\n      buf += red(file + ':' + issue.line);\n      if (issue.character) {\n        buf += red(':' + issue.character);\n      }\n      buf += '\\t';\n      buf += util.message(issue) + '\\n';\n    });\n  });\n\n  if (report.failures) {\n    buf += red([\n      '\\n',\n      '# JSLint failed, ',\n      report.failures + ' ',\n      'violations in ',\n      report.files_in_violation + '.  ',\n      report.file_count + ' ',\n      'files scanned.'\n    ].join(''));\n  }\n\n  return buf + '\\n';\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-jslint/node_modules/grunt-jslint/lib/reporters/errors-only.js":"\n'use strict';\n\nvar red = require('./util').color.red;\nvar standard = require('./standard');\n\nmodule.exports = function (report) {\n  return standard(report, true);\n};\n"}